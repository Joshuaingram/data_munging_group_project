---
title: "EDA"
author: "David Nezelek"
date: "2022-12-05"
output: html_document
description: In this file we'll be performing the Exploratory data
             analysis part of the project
---


# Importing the necessary Libraries: 

```{r}
library(data.table)
library(anytime)
library(stringi)
library(stringr)
library(tidyverse)

```

# Reading the dataset:

```{r echo = False}

data_file_name = "flights_miami_large.csv" 
data <- fread(data_file_name)
attach(data)
# head(data)

```

# Days in Advance Column
This column will show how many days before the actual flight was the data collected
We do this by subtracting the search date from the flight date.
``` {r echo = False}

daysInAdvance <- flightDate - searchDate
# daysInAdvance

```


# Departure Hour Column:
This column will tell us which hour of the day is the flight departing.
to do so: 
- we took the departure time in Epoch Seconds 
- we select the first 10 characters
- We convert those into numeric values
- we use anytime to parse the integers into a datetime structure
- Then we select the last 2 characters which happen to be the hour


``` {r echo = False}

departureHour <- as.integer(
  substr(
    anytime(
      as.numeric(
        substr(
          segmentsDepartureTimeEpochSeconds, 1, 10
          )
        )
      ),12,13
    )
  )


```
data$layoverDurationInMinutes <- (1/60)*(as.integer(3600*as.numeric(stri_extract(travelDuration,regex="(?<=PT)[0-9]{1,2}(?=H)")) + 60*as.numeric(stri_extract(travelDuration,regex="(?<=H)[0-9]{1,2}(?=M)")) - sapply(lapply(str_split(segmentsDurationInSeconds,"\\|\\|"),as.numeric),sum)))
data$layoverDurationInHours <- data$layoverDurationInMinutes/60
data$lastAirline <- stri_extract(segmentsAirlineName, regex="\\w+")
head(data)
# Arrival Hour Column
This column will tell us which hour of the day is the flight arriving
to do so:
- we took the departure time in Epoch Seconds 
- we extract the first 10 digits after the '||' if they exist using regex
- We convert those into numeric values
- we use anytime to parse the integers into a datetime structure
- Then we select the last 2 characters which happen to be the hour

``` {r echo = False}
data$arrivalHour <- as.integer(
  substr(
    anytime(
      as.numeric(
        stri_extract(
          segmentsArrivalTimeEpochSeconds, regex="[0-9]{10}(?!\\|)"
                     )
        )
      )
    ,12,13
    )
  )


```

# Lay over Duration in Minutes
# TODO: Add comments explaining code
``` {r echo = False}
hours_converted <- 3600*as.numeric(stri_extract(travelDuration,regex="(?<=PT)[0-9]{1,2}(?=H)"))
minutes_converted <- 60*as.numeric(stri_extract(travelDuration,regex="(?<=H)[0-9]{1,2}(?=M)"))
total_trip_duration_in_seconds <- hours_converted + minutes_converted

time_in_air <- str_split(segmentsDurationInSeconds,"\\|\\|") 
total_time_in_air <- sapply(lapply(time_in_air_seconds, as.numeric),sum)

layover_duration_in_seconds <- total_trip_duration_in_seconds - total_time_in_air

data$layoverDurationInHours <- layover_duration_in_seconds/3600
```

# Lay over Duration in Hours
# TODO: Add comments explaining code
``` {r echo = False}
# TODO: Add code and format it


```

# Last Airline
# TODO: Add comments explaining code
``` {r echo = False}
# TODO: Add code and format it


```

# Latest flights
Here we try to get the latest flights data by filtering by the daysInAdvance to
the day right before the flight
```{r}
latestFlights <- data %>%
  group_by(legId) %>%
  filter(daysInAdvance == 1)

```


```{r}
a = latestFlights, aes(x = totalFare)) + geom_histogram()

ggplot(data = latestFlights, aes(x = seatsRemaining)) + geom_histogram()

ggplot(data = latestFlights, aes(x = seatsRemaining, fill = lastAirline)) + geom_histogram()

ggplot(data = latestFlights, aes(x = layoverDurationInHours, y = totalFare, color = destinationAirport)) + geom_point()

ggplot(data = latestFlights, aes(x = arrivalHour, y = totalFare, color = destinationAirport)) + geom_point()

ggplot(data = latestFlights, aes(x = departureHour, y = totalFare, color = destinationAirport)) + geom_point()
```









